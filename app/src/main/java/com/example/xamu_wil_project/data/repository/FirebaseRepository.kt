package com.example.xamu_wil_project.data.repository\n\nimport android.util.Log\nimport com.example.xamu_wil_project.data.*\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.database.*\nimport com.google.firebase.storage.FirebaseStorage\nimport kotlinx.coroutines.channels.awaitClose\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.callbackFlow\nimport kotlinx.coroutines.tasks.await\nimport javax.inject.Inject\nimport javax.inject.Singleton\n\n/**\n * Firebase Repository - Primary data source for Xamu Wetlands App\n * Implements Firebase Realtime Database + Storage for all data operations\n */\n@Singleton\nclass FirebaseRepository @Inject constructor() {\n\n    companion object {\n        // Ensure we always connect to the intended Realtime Database URL\n        private const val DATABASE_URL = \"https://xamu-wil-default-rtdb.firebaseio.com/\"\n    }\n\n    // Use the explicit DB instance for all operations (avoids ambiguity when multiple DBs are present)\n    private val database: FirebaseDatabase = FirebaseDatabase.getInstance(DATABASE_URL)\n    private val storage = FirebaseStorage.getInstance()\n    private val auth = FirebaseAuth.getInstance()\n\n    // Client Operations\n    fun getClientsFlow(): Flow<List<Client>> = callbackFlow {\n        val ref = database.getReference(\"ClientInfo\")\n        val listener = ref.addValueEventListener(object : ValueEventListener {\n            override fun onDataChange(snapshot: DataSnapshot) {\n                val clients = mutableListOf<Client>()\n                for (child in snapshot.children) {\n                    child.getValue(Client::class.java)?.let { clients.add(it) }\n                }\n                trySend(clients)\n            }\n            override fun onCancelled(error: DatabaseError) {\n                close(error.toException())\n            }\n        })\n        awaitClose { ref.removeEventListener(listener) }\n    }\n\n    suspend fun addClient(client: Client): Result<String> {\n        return try {\n            Log.d(\"FirebaseRepository\", \"Attempting to add client: ${client.companyName}\")\n            val ref = database.getReference(\"ClientInfo\").push()\n            ref.setValue(client).await()\n            Log.d(\"FirebaseRepository\", \"Client added successfully with key: ${ref.key}\")\n            Result.success(ref.key ?: \"\")\n        } catch (e: Exception) {\n            Log.e(\"FirebaseRepository\", \"Failed to add client: ${e.message}\", e)\n            Result.failure(e)\n        }\n    }\n\n    suspend fun updateClient(client: Client): Result<Unit> {\n        return try {\n            val ref = database.getReference(\"ClientInfo\").orderByChild(\"companyName\").equalTo(client.companyName)\n            ref.addListenerForSingleValueEvent(object : ValueEventListener {\n                override fun onDataChange(snapshot: DataSnapshot) {\n                    for (child in snapshot.children) {\n                        child.ref.setValue(client)\n                    }\n                }\n                override fun onCancelled(error: DatabaseError) {\n                }\n            })\n            Result.success(Unit)\n        } catch (e: Exception) {\n            Result.failure(e)\n        }\n    }\n\n    suspend fun deleteClient(client: Client): Result<Unit> {\n        return try {\n            val ref = database.getReference(\"ClientInfo\").orderByChild(\"companyName\").equalTo(client.companyName)\n            ref.addListenerForSingleValueEvent(object : ValueEventListener {\n                override fun onDataChange(snapshot: DataSnapshot) {\n                    for (child in snapshot.children) {\n                        child.ref.removeValue()\n                    }\n                }\n                override fun onCancelled(error: DatabaseError) {\n                }\n            })\n            Result.success(Unit)\n        } catch (e: Exception) {\n            Result.failure(e)\n        }\n    }\n\n    // Project Operations\n    fun getProjectsFlow(userEmail: String): Flow<List<Project>> = callbackFlow {\n        val ref = database.getReference(\"ProjectsInfo\")\n        val listener = ref.orderByChild(\"appUserUsername\").equalTo(userEmail)\n            .addValueEventListener(object : ValueEventListener {\n                override fun onDataChange(snapshot: DataSnapshot) {\n                    val projects = mutableListOf<Project>()\n                    for (child in snapshot.children) {\n                        child.getValue(Project::class.java)?.let { projects.add(it) }\n                    }\n                    trySend(projects)\n                }\n                override fun onCancelled(error: DatabaseError) {\n                    close(error.toException())\n                }\n            })\n        awaitClose { ref.removeEventListener(listener) }\n    }\n\n    suspend fun addProject(project: Project): Result<String> {\n        return try {\n            val ref = database.getReference(\"ProjectsInfo\").push()\n            ref.setValue(project).await()\n            Result.success(ref.key ?: \"\")\n        } catch (e: Exception) {\n            Result.failure(e)\n        }\n    }\n\n    // Note Operations\n    suspend fun addNote(companyName: String, projectName: String, note: Note): Result<String> {\n        return try {\n            val ref = database.getReference(\"ProjectData/$companyName/$projectName/Notes\").push()\n            ref.setValue(note).await()\n            Result.success(ref.key ?: \"\")\n        } catch (e: Exception) {\n            Result.failure(e)\n        }\n    }\n\n    fun getNotesFlow(companyName: String, projectName: String): Flow<List<Note>> = callbackFlow {\n        val ref = database.getReference(\"ProjectData/$companyName/$projectName/Notes\")\n        val listener = ref.addValueEventListener(object : ValueEventListener {\n            override fun onDataChange(snapshot: DataSnapshot) {\n                val notes = mutableListOf<Note>()\n                for (child in snapshot.children) {\n                    child.getValue(Note::class.java)?.let { notes.add(it) }\n                }\n                trySend(notes)\n            }\n            override fun onCancelled(error: DatabaseError) {\n                close(error.toException())\n            }\n        })\n        awaitClose { ref.removeEventListener(listener) }\n    }\n\n    // Route Operations\n    suspend fun saveRoute(companyName: String, projectName: String, route: Route): Result<String> {\n        return try {\n            val ref = database.getReference(\"ProjectData/$companyName/$projectName/Routes/${route.routeId}\")\n            ref.setValue(route).await()\n            Result.success(route.routeId)\n        } catch (e: Exception) {\n            Result.failure(e)\n        }\n    }\n\n    fun getRoutesFlow(companyName: String, projectName: String): Flow<List<Route>> = callbackFlow {\n        val ref = database.getReference(\"ProjectData/$companyName/$projectName/Routes\")\n        val listener = ref.addValueEventListener(object : ValueEventListener {\n            override fun onDataChange(snapshot: DataSnapshot) {\n                val routes = mutableListOf<Route>()\n                for (child in snapshot.children) {\n                    child.getValue(Route::class.java)?.let { routes.add(it) }\n                }\n                trySend(routes)\n            }\n            override fun onCancelled(error: DatabaseError) {\n                close(error.toException())\n            }\n        })\n        awaitClose { ref.removeEventListener(listener) }\n    }\n\n    // Project Data Operations\n    fun getProjectDataFlow(companyName: String, projectName: String): Flow<ProjectData> = callbackFlow {\n        val ref = database.getReference(\"ProjectData/$companyName/$projectName\")\n        val listener = ref.addValueEventListener(object : ValueEventListener {\n            override fun onDataChange(snapshot: DataSnapshot) {\n                val notes = mutableListOf<Note>()\n                val routes = mutableListOf<Route>()\n                val photos = mutableListOf<FieldPhoto>()\n                val weatherData = mutableListOf<WeatherSoilData>()\n\n                snapshot.child(\"Notes\").children.forEach { child ->\n                    child.getValue(Note::class.java)?.let { notes.add(it) }\n                }\n                snapshot.child(\"Routes\").children.forEach { child ->\n                    child.getValue(Route::class.java)?.let { routes.add(it) }\n                }\n                snapshot.child(\"Photos\).children.forEach { child ->\n                    child.getValue(FieldPhoto::class.java)?.let { photos.add(it) }\n                }\n                snapshot.child(\"WeatherSoil\").children.forEach { child ->\n                    child.getValue(WeatherSoilData::class.java)?.let { weatherData.add(it) }\n                }\n\n                val biophysical = snapshot.child(\"Biophysical\").getValue(BiophysicalAttributes::class.java)\n                val impacts = snapshot.child(\"Impacts\").getValue(PhaseImpacts::class.java)\n\n                val projectData = ProjectData(\n                    biophysical = biophysical,\n                    impacts = impacts,\n                    notes = notes,\n                    routes = routes,\n                    photos = photos,\n                    weatherData = weatherData,\n                    lastUpdated = System.currentTimeMillis()\n                )\n                trySend(projectData)\n            }\n            override fun onCancelled(error: DatabaseError) {\n                close(error.toException())\n            }\n        })\n        awaitClose { ref.removeEventListener(listener) }\n    }\n\n    // Biophysical Data Operations\n    suspend fun saveBiophysicalData(\n        companyName: String,\n        projectName: String,\n        data: BiophysicalAttributes\n    ): Result<Unit> {\n        return try {\n            database.getReference(\"ProjectData/$companyName/$projectName/Biophysical\")\n                .setValue(data).await()\n            Result.success(Unit)\n        } catch (e: Exception) {\n            Result.failure(e)\n        }\n    }\n\n    // Impact Data Operations\n    suspend fun saveImpactData(\n        companyName: String,\n        projectName: String,\n        data: PhaseImpacts\n    ): Result<Unit> {\n        return try {\n            database.getReference(\"ProjectData/$companyName/$projectName/Impacts\")\n                .setValue(data).await()\n            Result.success(Unit)\n        } catch (e: Exception) {\n            Result.failure(e)\n        }\n    }\n\n    // Weather & Soil Operations\n    suspend fun addWeatherSoilData(\n        companyName: String,\n        projectName: String,\n        data: WeatherSoilData\n    ): Result<String> {\n        return try {\n            val ref = database.getReference(\"ProjectData/$companyName/$projectName/WeatherSoil\")\n                .push()\n            ref.setValue(data).await()\n            Result.success(ref.key ?: \"\")\n        } catch (e: Exception) {\n            Result.failure(e)\n        }\n    }\n\n    // User Profile Operations\n    suspend fun createOrUpdateUser(uid: String, user: AppUser): Result<Unit> {\n        return try {\n            database.getReference(\"AppUsers/$uid\").setValue(user).await()\n            Result.success(Unit)\n        } catch (e: Exception) {\n            Result.failure(e)\n        }\n    }\n\n    fun getUserProfile(uid: String): Flow<AppUser?> = callbackFlow {\n        val ref = database.getReference(\"AppUsers/$uid\")\n        val listener = ref.addValueEventListener(object : ValueEventListener {\n            override fun onDataChange(snapshot: DataSnapshot) {\n                val user = snapshot.getValue(AppUser::class.java)\n                trySend(user)\n            }\n            override fun onCancelled(error: DatabaseError) {\n                close(error.toException())\n            }\n        })\n        awaitClose { ref.removeEventListener(listener) }\n    }\n\n    // User Settings Operations\n    suspend fun saveUserSettings(settings: UserSettings): Result<Unit> {\n        return try {\n            val uid = auth.currentUser?.uid ?: return Result.failure(Exception(\"User not logged in\"))\n            database.getReference(\"UserSettings/$uid/AppSettings\").setValue(settings).await()\n            Result.success(Unit)\n        } catch (e: Exception) {\n            Result.failure(e)\n        }\n    }\n\n    fun getUserSettingsFlow(): Flow<UserSettings?> = callbackFlow {\n        val uid = auth.currentUser?.uid\n        if (uid == null) {\n            trySend(null)\n            close()\n            return@callbackFlow\n        }\n\n        val ref = database.getReference(\"UserSettings/$uid/AppSettings\")\n        val listener = ref.addValueEventListener(object : ValueEventListener {\n            override fun onDataChange(snapshot: DataSnapshot) {\n                val settings = snapshot.getValue(UserSettings::class.java)\n                trySend(settings)\n            }\n            override fun onCancelled(error: DatabaseError) {\n                close(error.toException())\n            }\n        })\n        awaitClose { ref.removeEventListener(listener) }\n    }\n\n    // Photo Upload Operations\n    suspend fun uploadPhoto(\n        companyName: String,\n        projectName: String,\n        photoUri: android.net.Uri,\n        caption: String,\n        location: String\n    ): Result<FieldPhoto> {\n        return try {\n            val photoId = System.currentTimeMillis().toString()\n            val storageRef = storage.reference\n                .child(\"projects/$companyName/$projectName/photos/$photoId.jpg\")\n\n            val uploadTask = storageRef.putFile(photoUri).await()\n            val downloadUrl = storageRef.downloadUrl.await()\n\n            val photo = FieldPhoto(\n                photoId = photoId,\n                url = downloadUrl.toString(),\n                caption = caption,\n                location = location,\n                timestamp = System.currentTimeMillis(),\n                userId = auth.currentUser?.uid ?: \"\",\n                uploadStatus = \"completed\"\n            )\n\n            database.getReference(\"ProjectData/$companyName/$projectName/Photos/$photoId\")\n                .setValue(photo).await()\n\n            Result.success(photo)\n        } catch (e: Exception) {\n            Result.failure(e)\n        }\n    }\n}\n