<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/xamu_wil_project/data/local/ClientRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/xamu_wil_project/data/local/ClientRepository.kt" />
              <option name="updatedContent" value="package com.example.xamu_wil_project.data.local&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.asLiveData&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;&#10;/**&#10; * Thin repository wrapper around ClientDao. Keeps call sites simple and testable.&#10; */&#10;class ClientRepository private constructor(private val db: AppDatabase) {&#10;&#10;    fun observeAll(): LiveData&lt;List&lt;ClientEntity&gt;&gt; = db.clientDao().getAllFlow().asLiveData()&#10;&#10;    suspend fun insert(entity: ClientEntity): Long = withContext(Dispatchers.IO) {&#10;        db.clientDao().insert(entity)&#10;    }&#10;&#10;    suspend fun update(entity: ClientEntity): Int = withContext(Dispatchers.IO) {&#10;        db.clientDao().update(entity)&#10;    }&#10;&#10;    suspend fun clearAll(): Int = withContext(Dispatchers.IO) {&#10;        db.clientDao().clearAll()&#10;    }&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: ClientRepository? = null&#10;&#10;        fun getInstance(context: Context): ClientRepository = INSTANCE ?: synchronized(this) {&#10;            val inst = ClientRepository(AppDatabase.getInstance(context))&#10;            INSTANCE = inst&#10;            inst&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/xamu_wil_project/ui/AddProjectActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/xamu_wil_project/ui/AddProjectActivity.kt" />
              <option name="originalContent" value="package com.example.xamu_wil_project.ui&#10;&#10;import android.app.Activity&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ListView&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AlertDialog&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.xamu_wil_project.R&#10;import com.example.xamu_wil_project.data.DataSeeder&#10;import com.example.xamu_wil_project.data.Project&#10;import com.example.xamu_wil_project.data.local.AppDatabase&#10;import com.example.xamu_wil_project.data.local.toEntity&#10;import com.example.xamu_wil_project.data.local.toModel&#10;import com.example.xamu_wil_project.util.ProjectAdapter&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.database.DatabaseReference&#10;import com.google.firebase.database.FirebaseDatabase&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.collectLatest&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;&#10;class AddProjectActivity : AppCompatActivity() {&#10;&#10;    private lateinit var auth: FirebaseAuth&#10;    private lateinit var dbRef: DatabaseReference&#10;&#10;    private val projects = mutableListOf&lt;Project&gt;()&#10;    private lateinit var listView: ListView&#10;    private lateinit var adapter: ProjectAdapter&#10;    private lateinit var etProjectName: EditText&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_add_project)&#10;&#10;        // Init Firebase (Option A)&#10;        auth = FirebaseAuth.getInstance()&#10;        dbRef = FirebaseDatabase.getInstance().reference&#10;&#10;        val company = intent.getStringExtra(&quot;companyName&quot;) ?: &quot;&quot;&#10;&#10;        val tvCompany = findViewById&lt;TextView&gt;(R.id.tVCompanyName)&#10;        val tvUserEmail = findViewById&lt;TextView&gt;(R.id.tVUserEmail)&#10;        etProjectName = findViewById&lt;EditText&gt;(R.id.eTProjectName)&#10;        val btnConfirm = findViewById&lt;Button&gt;(R.id.btnConfirmAddProject)&#10;        listView = findViewById(R.id.lVProjects)&#10;&#10;        adapter = ProjectAdapter(this, projects)&#10;        listView.adapter = adapter&#10;&#10;        // Display company and user info; allow '-' to mean unspecified&#10;        tvCompany.text = company.ifBlank { &quot;(unspecified)&quot; }&#10;        tvUserEmail.text = auth.currentUser?.email ?: &quot;(unsigned)&quot;&#10;&#10;        val db = AppDatabase.getInstance(this)&#10;        val projectDao = db.projectDao()&#10;&#10;        // Observe local DB for live updates; if a specific company was passed, show only those projects&#10;        lifecycleScope.launch {&#10;            if (company.isNotBlank()) {&#10;                projectDao.getByCompanyFlow(company).collectLatest { entities -&gt;&#10;                    projects.clear()&#10;                    projects.addAll(entities.map { it.toModel() })&#10;                    adapter.notifyDataSetChanged()&#10;                }&#10;            } else {&#10;                projectDao.getAllFlow().collectLatest { entities -&gt;&#10;                    projects.clear()&#10;                    projects.addAll(entities.map { it.toModel() })&#10;                    adapter.notifyDataSetChanged()&#10;                }&#10;            }&#10;        }&#10;&#10;        // Click a project to select and return it&#10;        listView.setOnItemClickListener { _, _, position, _ -&gt;&#10;            val selected = projects[position]&#10;            val intent = intent&#10;            intent.putExtra(&quot;projectName&quot;, selected.projectName)&#10;            intent.putExtra(&quot;companyName&quot;, selected.companyName)&#10;            setResult(Activity.RESULT_OK, intent)&#10;            finish()&#10;        }&#10;&#10;        // Long click to edit project name (simple inline edit)&#10;        listView.setOnItemLongClickListener { _, _, position, _ -&gt;&#10;            val selected = projects[position]&#10;            val input = EditText(this)&#10;            input.setText(selected.projectName)&#10;            AlertDialog.Builder(this)&#10;                .setTitle(&quot;Edit project name&quot;)&#10;                .setView(input)&#10;                .setPositiveButton(&quot;Save&quot;) { _, _ -&gt;&#10;                    val newName = input.text.toString().trim()&#10;                    if (newName.isNotBlank()) {&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val updated = selected.copy(projectName = newName)&#10;                                // update in Room on IO dispatcher&#10;                                withContext(Dispatchers.IO) {&#10;                                    projectDao.update(updated.toEntity())&#10;                                }&#10;                                Toast.makeText(this@AddProjectActivity, &quot;Project updated&quot;, Toast.LENGTH_SHORT).show()&#10;                            } catch (ex: Exception) {&#10;                                try { DataSeeder.addLocalProject(this@AddProjectActivity, Project(projectName = newName, companyName = selected.companyName, appUserUsername = selected.appUserUsername, companyEmail = selected.companyEmail)) } catch (_: Exception) {}&#10;                                Toast.makeText(this@AddProjectActivity, &quot;Could not update locally; saved to demo list&quot;, Toast.LENGTH_LONG).show()&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                .setNegativeButton(&quot;Cancel&quot;, null)&#10;                .show()&#10;            true&#10;        }&#10;&#10;        btnConfirm.setOnClickListener {&#10;            val name = etProjectName.text.toString().trim()&#10;            var companyName = company&#10;            var me = auth.currentUser?.email.orEmpty()&#10;            val email = &quot;&quot; // optional company email&#10;&#10;            if (name.isBlank()) {&#10;                Toast.makeText(this, &quot;Please enter a project name&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            if (companyName.isBlank() || companyName == &quot;-&quot; || companyName == &quot;(unspecified)&quot;) {&#10;                val input = EditText(this)&#10;                input.hint = &quot;Company Name&quot;&#10;                AlertDialog.Builder(this)&#10;                    .setTitle(&quot;Enter Company Name&quot;)&#10;                    .setView(input)&#10;                    .setPositiveButton(&quot;OK&quot;) { _, _ -&gt;&#10;                        val entered = input.text.toString().trim()&#10;                        if (entered.isBlank()) {&#10;                            Toast.makeText(this, &quot;Company name required to create project&quot;, Toast.LENGTH_SHORT).show()&#10;                            return@setPositiveButton&#10;                        }&#10;                        companyName = entered&#10;                        createProjectLocalAndRemote(projectDao, companyName, me, email, name)&#10;                    }&#10;                    .setNegativeButton(&quot;Cancel&quot;, null)&#10;                    .show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            if (me.isBlank()) me = &quot;demo.user@xamu.org&quot;&#10;&#10;            createProjectLocalAndRemote(projectDao, companyName, me, email, name)&#10;        }&#10;    }&#10;&#10;    private fun createProjectLocalAndRemote(projectDao: com.example.xamu_wil_project.data.local.ProjectDao, companyName: String, me: String, email: String, projectName: String) {&#10;        val projectObj = Project(projectName = projectName, companyName = companyName, appUserUsername = me, companyEmail = email)&#10;        val entity = projectObj.toEntity()&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                // insert on IO&#10;                val newId = withContext(Dispatchers.IO) {&#10;                    projectDao.insert(entity)&#10;                }&#10;                // Optimistically add the new project to the top of the list so the user sees it immediately&#10;                try {&#10;                    val added = projectObj.copy(id = newId)&#10;                    projects.add(0, added)&#10;                    adapter.notifyDataSetChanged()&#10;                    // scroll the list to top to reveal the newly added item&#10;                    listView.smoothScrollToPosition(0)&#10;                } catch (_: Exception) {}&#10;                // push to Firebase in background&#10;                try {&#10;                    val obj = mapOf(&#10;                        &quot;companyEmail&quot; to email,&#10;                        &quot;companyName&quot; to companyName,&#10;                        &quot;appUserUsername&quot; to me,&#10;                        &quot;projectName&quot; to projectName&#10;                    )&#10;                    FirebaseDatabase.getInstance().getReference(&quot;ProjectsInfo&quot;).push().setValue(obj)&#10;                } catch (_: Exception) { }&#10;&#10;                Toast.makeText(this@AddProjectActivity, &quot;Project created&quot;, Toast.LENGTH_SHORT).show()&#10;                // clear the project name so the user can add more and see the new entry in the list&#10;                etProjectName.text.clear()&#10;                // Flow collector will refresh the list from Room; optimistic update above avoids perceived delay&#10;            } catch (ex: Exception) {&#10;                try { DataSeeder.addLocalProject(this@AddProjectActivity, projectObj) } catch (_: Exception) {}&#10;                Toast.makeText(this@AddProjectActivity, &quot;Could not add to server; saved locally&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.xamu_wil_project.ui&#10;&#10;import android.app.Activity&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ListView&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AlertDialog&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.xamu_wil_project.R&#10;import com.example.xamu_wil_project.data.DataSeeder&#10;import com.example.xamu_wil_project.data.Project&#10;import com.example.xamu_wil_project.data.local.AppDatabase&#10;import com.example.xamu_wil_project.data.local.toEntity&#10;import com.example.xamu_wil_project.data.local.toModel&#10;import com.example.xamu_wil_project.util.ProjectAdapter&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.database.DatabaseReference&#10;import com.google.firebase.database.FirebaseDatabase&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.collectLatest&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;&#10;class AddProjectActivity : AppCompatActivity() {&#10;&#10;    private lateinit var auth: FirebaseAuth&#10;    private lateinit var dbRef: DatabaseReference&#10;&#10;    private val projects = mutableListOf&lt;Project&gt;()&#10;    private lateinit var listView: ListView&#10;    private lateinit var adapter: ProjectAdapter&#10;    private lateinit var etProjectName: EditText&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_add_project)&#10;&#10;        // Init Firebase (Option A)&#10;        auth = FirebaseAuth.getInstance()&#10;        dbRef = FirebaseDatabase.getInstance().reference&#10;&#10;        val company = intent.getStringExtra(&quot;companyName&quot;) ?: &quot;&quot;&#10;&#10;        val tvCompany = findViewById&lt;TextView&gt;(R.id.tVCompanyName)&#10;        val tvUserEmail = findViewById&lt;TextView&gt;(R.id.tVUserEmail)&#10;        etProjectName = findViewById&lt;EditText&gt;(R.id.eTProjectName)&#10;        val btnConfirm = findViewById&lt;Button&gt;(R.id.btnConfirmAddProject)&#10;        listView = findViewById(R.id.lVProjects)&#10;&#10;        adapter = ProjectAdapter(this, projects)&#10;        listView.adapter = adapter&#10;&#10;        // Display company and user info; allow '-' to mean unspecified&#10;        tvCompany.text = company.ifBlank { &quot;(unspecified)&quot; }&#10;        tvUserEmail.text = auth.currentUser?.email ?: &quot;(unsigned)&quot;&#10;&#10;        val db = AppDatabase.getInstance(this)&#10;        val projectDao = db.projectDao()&#10;&#10;        // Observe local DB for live updates; if a specific company was passed, show only those projects&#10;        lifecycleScope.launch {&#10;            if (company.isNotBlank()) {&#10;                projectDao.getByCompanyFlow(company).collectLatest { entities -&gt;&#10;                    projects.clear()&#10;                    projects.addAll(entities.map { it.toModel() })&#10;                    adapter.notifyDataSetChanged()&#10;                }&#10;            } else {&#10;                projectDao.getAllFlow().collectLatest { entities -&gt;&#10;                    projects.clear()&#10;                    projects.addAll(entities.map { it.toModel() })&#10;                    adapter.notifyDataSetChanged()&#10;                }&#10;            }&#10;        }&#10;&#10;        // Click a project to select and return it&#10;        listView.setOnItemClickListener { _, _, position, _ -&gt;&#10;            val selected = projects[position]&#10;            val intent = intent&#10;            intent.putExtra(&quot;projectName&quot;, selected.projectName)&#10;            intent.putExtra(&quot;companyName&quot;, selected.companyName)&#10;            setResult(Activity.RESULT_OK, intent)&#10;            finish()&#10;        }&#10;&#10;        // Long click to edit project name (simple inline edit)&#10;        listView.setOnItemLongClickListener { _, _, position, _ -&gt;&#10;            val selected = projects[position]&#10;            val input = EditText(this)&#10;            input.setText(selected.projectName)&#10;            AlertDialog.Builder(this)&#10;                .setTitle(&quot;Edit project name&quot;)&#10;                .setView(input)&#10;                .setPositiveButton(&quot;Save&quot;) { _, _ -&gt;&#10;                    val newName = input.text.toString().trim()&#10;                    if (newName.isNotBlank()) {&#10;                        lifecycleScope.launch {&#10;                            try {&#10;                                val updated = selected.copy(projectName = newName)&#10;                                // update in Room on IO dispatcher&#10;                                withContext(Dispatchers.IO) {&#10;                                    projectDao.update(updated.toEntity())&#10;                                }&#10;                                Toast.makeText(this@AddProjectActivity, &quot;Project updated&quot;, Toast.LENGTH_SHORT).show()&#10;                            } catch (ex: Exception) {&#10;                                try { DataSeeder.addLocalProject(this@AddProjectActivity, Project(projectName = newName, companyName = selected.companyName, appUserUsername = selected.appUserUsername, companyEmail = selected.companyEmail)) } catch (_: Exception) {}&#10;                                Toast.makeText(this@AddProjectActivity, &quot;Could not update locally; saved to demo list&quot;, Toast.LENGTH_LONG).show()&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                .setNegativeButton(&quot;Cancel&quot;, null)&#10;                .show()&#10;            true&#10;        }&#10;&#10;        btnConfirm.setOnClickListener {&#10;            val name = etProjectName.text.toString().trim()&#10;            var companyName = company&#10;            var me = auth.currentUser?.email.orEmpty()&#10;            val email = &quot;&quot; // optional company email&#10;&#10;            if (name.isBlank()) {&#10;                Toast.makeText(this, &quot;Please enter a project name&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            if (companyName.isBlank() || companyName == &quot;-&quot; || companyName == &quot;(unspecified)&quot;) {&#10;                val input = EditText(this)&#10;                input.hint = &quot;Company Name&quot;&#10;                AlertDialog.Builder(this)&#10;                    .setTitle(&quot;Enter Company Name&quot;)&#10;                    .setView(input)&#10;                    .setPositiveButton(&quot;OK&quot;) { _, _ -&gt;&#10;                        val entered = input.text.toString().trim()&#10;                        if (entered.isBlank()) {&#10;                            Toast.makeText(this, &quot;Company name required to create project&quot;, Toast.LENGTH_SHORT).show()&#10;                            return@setPositiveButton&#10;                        }&#10;                        companyName = entered&#10;                        createProjectLocalAndRemote(projectDao, companyName, me, email, name)&#10;                    }&#10;                    .setNegativeButton(&quot;Cancel&quot;, null)&#10;                    .show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            if (me.isBlank()) me = &quot;demo.user@xamu.org&quot;&#10;&#10;            createProjectLocalAndRemote(projectDao, companyName, me, email, name)&#10;        }&#10;    }&#10;&#10;    private fun createProjectLocalAndRemote(projectDao: com.example.xamu_wil_project.data.local.ProjectDao, companyName: String, me: String, email: String, projectName: String) {&#10;        val projectObj = Project(projectName = projectName, companyName = companyName, appUserUsername = me, companyEmail = email)&#10;        val entity = projectObj.toEntity()&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                // insert on IO&#10;                val newId = withContext(Dispatchers.IO) {&#10;                    projectDao.insert(entity)&#10;                }&#10;                // Optimistically add the new project to the top of the list so the user sees it immediately&#10;                try {&#10;                    val added = projectObj.copy(id = newId)&#10;                    projects.add(0, added)&#10;                    adapter.notifyDataSetChanged()&#10;                    // scroll the list to top to reveal the newly added item&#10;                    listView.smoothScrollToPosition(0)&#10;                } catch (_: Exception) {}&#10;                // push to Firebase in background&#10;                try {&#10;                    val obj = mapOf(&#10;                        &quot;companyEmail&quot; to email,&#10;                        &quot;companyName&quot; to companyName,&#10;                        &quot;appUserUsername&quot; to me,&#10;                        &quot;projectName&quot; to projectName&#10;                    )&#10;                    FirebaseDatabase.getInstance().getReference(&quot;ProjectsInfo&quot;).push().setValue(obj)&#10;                } catch (_: Exception) { }&#10;&#10;                Toast.makeText(this@AddProjectActivity, &quot;Project created&quot;, Toast.LENGTH_SHORT).show()&#10;                // clear the project name so the user can add more and see the new entry in the list&#10;                etProjectName.text.clear()&#10;                // Flow collector will refresh the list from Room; optimistic update above avoids perceived delay&#10;&#10;                // If this activity was started for a result (e.g., from SelectProjectActivity), notify caller so it can refresh&#10;                val startedForResult = callingActivity != null || intent.getBooleanExtra(&quot;forResult&quot;, false)&#10;                if (startedForResult) {&#10;                    setResult(Activity.RESULT_OK)&#10;                    // finish so the caller receives onActivityResult and reloads list&#10;                    finish()&#10;                }&#10;            } catch (ex: Exception) {&#10;                try { DataSeeder.addLocalProject(this@AddProjectActivity, projectObj) } catch (_: Exception) {}&#10;                Toast.makeText(this@AddProjectActivity, &quot;Could not add to server; saved locally&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/xamu_wil_project/ui/DashboardActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/xamu_wil_project/ui/DashboardActivity.kt" />
              <option name="originalContent" value="package com.example.xamu_wil_project.ui&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import com.google.firebase.auth.FirebaseAuth&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Spinner&#10;import android.widget.EditText&#10;import android.widget.ArrayAdapter&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.xamu_wil_project.R&#10;import com.google.android.material.appbar.MaterialToolbar&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import android.view.MenuItem&#10;import android.widget.Toast&#10;import com.example.xamu_wil_project.data.DataSeeder&#10;import androidx.lifecycle.lifecycleScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import kotlinx.coroutines.flow.collectLatest&#10;import com.example.xamu_wil_project.data.local.AppDatabase&#10;import com.example.xamu_wil_project.data.local.WeatherSoilEntity&#10;import com.example.xamu_wil_project.data.local.ClientEntity&#10;&#10;/**&#10; * Simple dashboard that shows the main features and navigational buttons to other screens.&#10; * Designed to be a central hub immediately after sign-in.&#10; */&#10;class DashboardActivity : AppCompatActivity() {&#10;&#10;    private lateinit var auth: FirebaseAuth&#10;    private val dashboardClients = mutableListOf&lt;ClientEntity&gt;()&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_dashboard)&#10;&#10;        auth = FirebaseAuth.getInstance()&#10;&#10;        // Dashboard quick-entry views&#10;        // Find new quick-entry views dynamically to avoid layout-scope lint issues&#10;        val spinnerClients = resources.getIdentifier(&quot;spinnerDashboardClients&quot;, &quot;id&quot;, packageName).let { id -&gt; if (id != 0) findViewById&lt;Spinner&gt;(id) else null }&#10;        val etTemp = resources.getIdentifier(&quot;etDashboardTemp&quot;, &quot;id&quot;, packageName).let { id -&gt; if (id != 0) findViewById&lt;EditText&gt;(id) else null }&#10;        val etHum = resources.getIdentifier(&quot;etDashboardHumidity&quot;, &quot;id&quot;, packageName).let { id -&gt; if (id != 0) findViewById&lt;EditText&gt;(id) else null }&#10;        val etSoilMoist = resources.getIdentifier(&quot;etDashboardSoilMoisture&quot;, &quot;id&quot;, packageName).let { id -&gt; if (id != 0) findViewById&lt;EditText&gt;(id) else null }&#10;        val etSoilPH = resources.getIdentifier(&quot;etDashboardSoilPH&quot;, &quot;id&quot;, packageName).let { id -&gt; if (id != 0) findViewById&lt;EditText&gt;(id) else null }&#10;        val btnSaveQuick = resources.getIdentifier(&quot;btnSaveDashboardWeather&quot;, &quot;id&quot;, packageName).let { id -&gt; if (id != 0) findViewById&lt;Button&gt;(id) else null }&#10;&#10;        // Prepare a simple spinner adapter (only if spinner exists)&#10;        val spinnerAdapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, mutableListOf&lt;String&gt;())&#10;        spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        spinnerClients?.adapter = spinnerAdapter&#10;&#10;        // Load clients from Room and populate spinner&#10;        val db = AppDatabase.getInstance(this)&#10;        val clientDao = db.clientDao()&#10;        val weatherDao = db.weatherSoilDao()&#10;&#10;        lifecycleScope.launch {&#10;            clientDao.getAllFlow().collectLatest { list -&gt;&#10;                dashboardClients.clear()&#10;                dashboardClients.addAll(list)&#10;                val names = dashboardClients.map { it.companyName.ifBlank { &quot;(unnamed)&quot; } }&#10;                // update spinner adapter contents on main thread&#10;                spinnerAdapter.clear()&#10;                spinnerAdapter.addAll(names)&#10;                spinnerAdapter.notifyDataSetChanged()&#10;            }&#10;        }&#10;&#10;        btnSaveQuick?.setOnClickListener {&#10;            // defensive checks for optional views&#10;            val spinner = spinnerClients&#10;            val pos = spinner?.selectedItemPosition ?: -1&#10;            if (pos &lt; 0 || pos &gt;= dashboardClients.size) {&#10;                Toast.makeText(this, &quot;Please select a client&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            val clientId = dashboardClients[pos].id&#10;&#10;            val temp = etTemp?.text.toString().trim().toDoubleOrNull()&#10;            val hum = etHum?.text.toString().trim().toDoubleOrNull()&#10;            val soilMoist = etSoilMoist?.text.toString().trim().toDoubleOrNull()&#10;            val soilPH = etSoilPH?.text.toString().trim().toDoubleOrNull()&#10;&#10;            val entity = WeatherSoilEntity(&#10;                clientId = clientId,&#10;                temperatureC = temp,&#10;                humidityPct = hum,&#10;                soilMoisturePct = soilMoist,&#10;                soilPH = soilPH,&#10;                notes = &quot;&quot;&#10;            )&#10;&#10;            lifecycleScope.launch {&#10;                try {&#10;                    val rowId = withContext(Dispatchers.IO) { weatherDao.insert(entity) }&#10;                    if (rowId &gt; 0) {&#10;                        Toast.makeText(this@DashboardActivity, &quot;Observation saved&quot;, Toast.LENGTH_SHORT).show()&#10;                        // clear quick fields&#10;                        etTemp?.text?.clear()&#10;                        etHum?.text?.clear()&#10;                        etSoilMoist?.text?.clear()&#10;                        etSoilPH?.text?.clear()&#10;                    } else {&#10;                        Toast.makeText(this@DashboardActivity, &quot;Could not save observation&quot;, Toast.LENGTH_LONG).show()&#10;                    }&#10;                } catch (ex: Exception) {&#10;                    Toast.makeText(this@DashboardActivity, &quot;Error saving: ${ex.message}&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            }&#10;        }&#10;&#10;        // Top app bar&#10;        val topBar = findViewById&lt;MaterialToolbar&gt;(R.id.topAppBar)&#10;        topBar.setNavigationOnClickListener { finish() }&#10;&#10;        // Bottom navigation&#10;        val bottomNav = findViewById&lt;BottomNavigationView&gt;(R.id.bottomNav)&#10;        bottomNav.setOnItemSelectedListener { item: MenuItem -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_home -&gt; {&#10;                    Toast.makeText(this, &quot;Home&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                R.id.nav_clients -&gt; {&#10;                    startActivity(Intent(this, SelectClientActivity::class.java))&#10;                    true&#10;                }&#10;                R.id.nav_projects -&gt; {&#10;                    startActivity(Intent(this, SelectProjectActivity::class.java))&#10;                    true&#10;                }&#10;                R.id.nav_add -&gt; {&#10;                    startActivity(Intent(this, AddProjectActivity::class.java))&#10;                    true&#10;                }&#10;                R.id.nav_settings -&gt; {&#10;                    startActivity(Intent(this, SettingsActivity::class.java))&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;&#10;        findViewById&lt;Button&gt;(R.id.btnClients).setOnClickListener {&#10;            startActivity(Intent(this, SelectClientActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btnProjects).setOnClickListener {&#10;            startActivity(Intent(this, SelectProjectActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btnAddProject).setOnClickListener {&#10;            startActivity(Intent(this, AddProjectActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btnAddData).setOnClickListener {&#10;            // Route to SelectProjectActivity so the user picks a project before adding data&#10;            startActivity(Intent(this, SelectProjectActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btnAddWeatherSoil).setOnClickListener {&#10;            startActivity(Intent(this, AddWeatherSoilActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btnSearch).setOnClickListener {&#10;            startActivity(Intent(this, SearchInternetActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btnSettings).setOnClickListener {&#10;            startActivity(Intent(this, SettingsActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btnProjectDetails).setOnClickListener {&#10;            startActivity(Intent(this, ProjectDetailsActivity::class.java))&#10;        }&#10;&#10;        findViewById&lt;Button&gt;(R.id.btnLogout).setOnClickListener {&#10;            auth.signOut()&#10;            startActivity(Intent(this, LoginActivity::class.java))&#10;            finish()&#10;        }&#10;&#10;        findViewById&lt;Button&gt;(R.id.btnResetDemo).setOnClickListener {&#10;            // Reset demo data and notify the user&#10;            try {&#10;                DataSeeder.resetSeed(this)&#10;                Toast.makeText(this, &quot;Demo data reset&quot;, Toast.LENGTH_SHORT).show()&#10;            } catch (ex: Exception) {&#10;                Toast.makeText(this, &quot;Could not reset demo data: ${ex.message}&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;        }&#10;&#10;        val tvIntro = findViewById&lt;TextView&gt;(R.id.tvDashboardIntro)&#10;        tvIntro.text = getString(R.string.dashboard_intro)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.xamu_wil_project.ui&#13;&#10;&#13;&#10;import android.content.Intent&#13;&#10;import android.os.Bundle&#13;&#10;import com.google.firebase.auth.FirebaseAuth&#13;&#10;import android.widget.Button&#13;&#10;import android.widget.TextView&#13;&#10;import android.widget.Spinner&#13;&#10;import android.widget.EditText&#13;&#10;import android.widget.ArrayAdapter&#13;&#10;import androidx.appcompat.app.AppCompatActivity&#13;&#10;import com.example.xamu_wil_project.R&#13;&#10;import com.google.android.material.appbar.MaterialToolbar&#13;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#13;&#10;import android.view.MenuItem&#13;&#10;import android.widget.Toast&#13;&#10;import com.example.xamu_wil_project.data.DataSeeder&#13;&#10;import androidx.lifecycle.lifecycleScope&#13;&#10;import kotlinx.coroutines.Dispatchers&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;import kotlinx.coroutines.withContext&#13;&#10;import kotlinx.coroutines.flow.collectLatest&#13;&#10;import com.example.xamu_wil_project.data.local.AppDatabase&#13;&#10;import com.example.xamu_wil_project.data.local.WeatherSoilEntity&#13;&#10;import com.example.xamu_wil_project.data.local.ClientEntity&#13;&#10;&#13;&#10;/**&#13;&#10; * Simple dashboard that shows the main features and navigational buttons to other screens.&#13;&#10; * Designed to be a central hub immediately after sign-in.&#13;&#10; */&#13;&#10;class DashboardActivity : AppCompatActivity() {&#13;&#10;&#13;&#10;    private lateinit var auth: FirebaseAuth&#13;&#10;    private val dashboardClients = mutableListOf&lt;ClientEntity&gt;()&#13;&#10;&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;        setContentView(R.layout.activity_dashboard)&#13;&#10;&#13;&#10;        auth = FirebaseAuth.getInstance()&#13;&#10;&#13;&#10;        // Dashboard quick-entry views (direct lookup is preferred)&#13;&#10;        val spinnerClients = findViewById&lt;Spinner?&gt;(R.id.spinnerDashboardClients)&#13;&#10;        val etTemp = findViewById&lt;EditText?&gt;(R.id.etDashboardTemp)&#13;&#10;        val etHum = findViewById&lt;EditText?&gt;(R.id.etDashboardHumidity)&#13;&#10;        val etSoilMoist = findViewById&lt;EditText?&gt;(R.id.etDashboardSoilMoisture)&#13;&#10;        val etSoilPH = findViewById&lt;EditText?&gt;(R.id.etDashboardSoilPH)&#13;&#10;        val btnSaveQuick = findViewById&lt;Button?&gt;(R.id.btnSaveDashboardWeather)&#13;&#10;&#13;&#10;        // Prepare a simple spinner adapter (only if spinner exists)&#13;&#10;        val spinnerAdapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, mutableListOf&lt;String&gt;())&#13;&#10;        spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#13;&#10;        spinnerClients?.adapter = spinnerAdapter&#13;&#10;&#13;&#10;        // Load clients from Room and populate spinner&#13;&#10;        val db = AppDatabase.getInstance(this)&#13;&#10;        val clientDao = db.clientDao()&#13;&#10;        val weatherDao = db.weatherSoilDao()&#13;&#10;&#13;&#10;        lifecycleScope.launch {&#13;&#10;            clientDao.getAllFlow().collectLatest { list -&gt;&#13;&#10;                dashboardClients.clear()&#13;&#10;                dashboardClients.addAll(list)&#13;&#10;                val names = dashboardClients.map { it.companyName.ifBlank { &quot;(unnamed)&quot; } }&#13;&#10;                // update spinner adapter contents on main thread&#13;&#10;                spinnerAdapter.clear()&#13;&#10;                spinnerAdapter.addAll(names)&#13;&#10;                spinnerAdapter.notifyDataSetChanged()&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        btnSaveQuick?.setOnClickListener {&#13;&#10;            // defensive checks for optional views&#13;&#10;            val spinner = spinnerClients&#13;&#10;            val pos = spinner?.selectedItemPosition ?: -1&#13;&#10;            if (pos &lt; 0 || pos &gt;= dashboardClients.size) {&#13;&#10;                Toast.makeText(this, &quot;Please select a client&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;                return@setOnClickListener&#13;&#10;            }&#13;&#10;            val clientId = dashboardClients[pos].id&#13;&#10;&#13;&#10;            val temp = etTemp?.text.toString().trim().toDoubleOrNull()&#13;&#10;            val hum = etHum?.text.toString().trim().toDoubleOrNull()&#13;&#10;            val soilMoist = etSoilMoist?.text.toString().trim().toDoubleOrNull()&#13;&#10;            val soilPH = etSoilPH?.text.toString().trim().toDoubleOrNull()&#13;&#10;&#13;&#10;            val entity = WeatherSoilEntity(&#13;&#10;                clientId = clientId,&#13;&#10;                temperatureC = temp,&#13;&#10;                humidityPct = hum,&#13;&#10;                soilMoisturePct = soilMoist,&#13;&#10;                soilPH = soilPH,&#13;&#10;                notes = &quot;&quot;&#13;&#10;            )&#13;&#10;&#13;&#10;            lifecycleScope.launch {&#13;&#10;                try {&#13;&#10;                    val rowId = withContext(Dispatchers.IO) { weatherDao.insert(entity) }&#13;&#10;                    if (rowId &gt; 0) {&#13;&#10;                        Toast.makeText(this@DashboardActivity, &quot;Observation saved&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;                        // clear quick fields&#13;&#10;                        etTemp?.text?.clear()&#13;&#10;                        etHum?.text?.clear()&#13;&#10;                        etSoilMoist?.text?.clear()&#13;&#10;                        etSoilPH?.text?.clear()&#13;&#10;                    } else {&#13;&#10;                        Toast.makeText(this@DashboardActivity, &quot;Could not save observation&quot;, Toast.LENGTH_LONG).show()&#13;&#10;                    }&#13;&#10;                } catch (ex: Exception) {&#13;&#10;                    Toast.makeText(this@DashboardActivity, &quot;Error saving: ${ex.message}&quot;, Toast.LENGTH_LONG).show()&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // Top app bar&#13;&#10;        val topBar = findViewById&lt;MaterialToolbar&gt;(R.id.topAppBar)&#13;&#10;        topBar.setNavigationOnClickListener { finish() }&#13;&#10;&#13;&#10;        // Bottom navigation&#13;&#10;        val bottomNav = findViewById&lt;BottomNavigationView&gt;(R.id.bottomNav)&#13;&#10;        bottomNav.setOnItemSelectedListener { item: MenuItem -&gt;&#13;&#10;            when (item.itemId) {&#13;&#10;                R.id.nav_home -&gt; {&#13;&#10;                    Toast.makeText(this, &quot;Home&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;                    true&#13;&#10;                }&#13;&#10;                R.id.nav_clients -&gt; {&#13;&#10;                    startActivity(Intent(this, SelectClientActivity::class.java))&#13;&#10;                    true&#13;&#10;                }&#13;&#10;                R.id.nav_projects -&gt; {&#13;&#10;                    startActivity(Intent(this, SelectProjectActivity::class.java))&#13;&#10;                    true&#13;&#10;                }&#13;&#10;                R.id.nav_add -&gt; {&#13;&#10;                    startActivity(Intent(this, AddProjectActivity::class.java))&#13;&#10;                    true&#13;&#10;                }&#13;&#10;                R.id.nav_settings -&gt; {&#13;&#10;                    startActivity(Intent(this, SettingsActivity::class.java))&#13;&#10;                    true&#13;&#10;                }&#13;&#10;                else -&gt; false&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        findViewById&lt;Button&gt;(R.id.btnClients).setOnClickListener {&#13;&#10;            startActivity(Intent(this, SelectClientActivity::class.java))&#13;&#10;        }&#13;&#10;        findViewById&lt;Button&gt;(R.id.btnProjects).setOnClickListener {&#13;&#10;            startActivity(Intent(this, SelectProjectActivity::class.java))&#13;&#10;        }&#13;&#10;        findViewById&lt;Button&gt;(R.id.btnAddProject).setOnClickListener {&#13;&#10;            startActivity(Intent(this, AddProjectActivity::class.java))&#13;&#10;        }&#13;&#10;        findViewById&lt;Button&gt;(R.id.btnAddData).setOnClickListener {&#13;&#10;            // Route to SelectProjectActivity so the user picks a project before adding data&#13;&#10;            startActivity(Intent(this, SelectProjectActivity::class.java))&#13;&#10;        }&#13;&#10;        findViewById&lt;Button&gt;(R.id.btnAddWeatherSoil).setOnClickListener {&#13;&#10;            startActivity(Intent(this, AddWeatherSoilActivity::class.java))&#13;&#10;        }&#13;&#10;        findViewById&lt;Button&gt;(R.id.btnSearch).setOnClickListener {&#13;&#10;            startActivity(Intent(this, SearchInternetActivity::class.java))&#13;&#10;        }&#13;&#10;        findViewById&lt;Button&gt;(R.id.btnSettings).setOnClickListener {&#13;&#10;            startActivity(Intent(this, SettingsActivity::class.java))&#13;&#10;        }&#13;&#10;        findViewById&lt;Button&gt;(R.id.btnProjectDetails).setOnClickListener {&#13;&#10;            startActivity(Intent(this, ProjectDetailsActivity::class.java))&#13;&#10;        }&#13;&#10;&#13;&#10;        findViewById&lt;Button&gt;(R.id.btnLogout).setOnClickListener {&#13;&#10;            auth.signOut()&#13;&#10;            startActivity(Intent(this, LoginActivity::class.java))&#13;&#10;            finish()&#13;&#10;        }&#13;&#10;&#13;&#10;        findViewById&lt;Button&gt;(R.id.btnResetDemo).setOnClickListener {&#13;&#10;            // Reset demo data and notify the user&#13;&#10;            try {&#13;&#10;                DataSeeder.resetSeed(this)&#13;&#10;                Toast.makeText(this, &quot;Demo data reset&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;            } catch (ex: Exception) {&#13;&#10;                Toast.makeText(this, &quot;Could not reset demo data: ${ex.message}&quot;, Toast.LENGTH_LONG).show()&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        val tvIntro = findViewById&lt;TextView&gt;(R.id.tvDashboardIntro)&#13;&#10;        tvIntro.text = getString(R.string.dashboard_intro)&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/xamu_wil_project/ui/SelectProjectActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/xamu_wil_project/ui/SelectProjectActivity.kt" />
              <option name="originalContent" value="package com.example.xamu_wil_project.ui&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.ArrayAdapter&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ListView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.widget.addTextChangedListener&#10;import com.example.xamu_wil_project.R&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.database.*&#10;import com.example.xamu_wil_project.data.DataSeeder&#10;import com.example.xamu_wil_project.data.Project&#10;&#10;class SelectProjectActivity : AppCompatActivity() {&#10;&#10;    private lateinit var auth: FirebaseAuth&#10;    private lateinit var db: DatabaseReference&#10;&#10;    private val allProjects = mutableListOf&lt;Project&gt;()&#10;    private val visible = mutableListOf&lt;Project&gt;()&#10;    private lateinit var adapter: ArrayAdapter&lt;String&gt;&#10;    private val REQ_ADD_PROJECT = 2001&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_select_project)&#10;&#10;        auth = FirebaseAuth.getInstance()&#10;        db = FirebaseDatabase.getInstance().getReference(&quot;ProjectsInfo&quot;)&#10;&#10;        val list: ListView = findViewById(R.id.lVProjects)&#10;        val search: EditText = findViewById(R.id.edtSearchProjects)&#10;        val btnAdd: Button = findViewById(R.id.btnConfirmAddProject)&#10;&#10;        adapter = ArrayAdapter(this, android.R.layout.simple_list_item_1, mutableListOf())&#10;        list.adapter = adapter&#10;&#10;        // Capture incoming company name (if this activity was opened after selecting a client)&#10;        val incomingCompany = intent.getStringExtra(&quot;companyName&quot;) ?: &quot;&quot;&#10;&#10;        loadProjects()&#10;&#10;        search.addTextChangedListener(&#10;            onTextChanged = { text, _, _, _ -&gt; filter(text?.toString().orEmpty()) }&#10;        )&#10;&#10;        list.setOnItemClickListener { _, _, position, _ -&gt;&#10;            val p = visible[position]&#10;            val intent = Intent(this, ProjectDetailsActivity::class.java)&#10;                .putExtra(&quot;companyName&quot;, p.companyName ?: &quot;-&quot;)&#10;                .putExtra(&quot;projectName&quot;, p.projectName ?: &quot;-&quot;)&#10;            startActivity(intent)&#10;        }&#10;&#10;        btnAdd.setOnClickListener {&#10;            // If this screen was opened for a specific company, forward it to AddProjectActivity&#10;            val companyToPass = if (incomingCompany.isNotBlank()) incomingCompany else &quot;&quot;&#10;            startActivityForResult(Intent(this, AddProjectActivity::class.java).putExtra(&quot;companyName&quot;, companyToPass), REQ_ADD_PROJECT)&#10;        }&#10;    }&#10;&#10;    private fun loadProjects() {&#10;        val myEmail = auth.currentUser?.email&#10;        // Use single-value read and fallback to demo projects when empty or on error.&#10;        db.addListenerForSingleValueEvent(object : ValueEventListener {&#10;            override fun onDataChange(snapshot: DataSnapshot) {&#10;                allProjects.clear()&#10;                if (snapshot.exists() &amp;&amp; snapshot.hasChildren()) {&#10;                    for (child in snapshot.children) {&#10;                        val p = child.getValue(Project::class.java)&#10;                        // If user is signed in, filter by their email; otherwise include all&#10;                        if (p != null &amp;&amp; (myEmail == null || myEmail.isBlank() || p.appUserUsername == myEmail)) {&#10;                            allProjects.add(p)&#10;                        }&#10;                    }&#10;                    if (allProjects.isNotEmpty()) {&#10;                        filter(&quot;&quot;) // show all for this user or all projects&#10;                        return&#10;                    }&#10;                }&#10;                // fallback to demo projects&#10;                allProjects.addAll(DataSeeder.getLocalProjects(this@SelectProjectActivity))&#10;                filter(&quot;&quot;)&#10;                Toast.makeText(this@SelectProjectActivity, &quot;Using demo projects&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;&#10;            override fun onCancelled(error: DatabaseError) {&#10;                // on error, fallback to demo&#10;                allProjects.clear()&#10;                allProjects.addAll(DataSeeder.getLocalProjects(this@SelectProjectActivity))&#10;                filter(&quot;&quot;)&#10;                Toast.makeText(this@SelectProjectActivity, &quot;Could not load projects; using demo data&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun filter(query: String) {&#10;        val q = query.trim().lowercase()&#10;        visible.clear()&#10;        visible.addAll(&#10;            allProjects.filter {&#10;                it.projectName?.lowercase()?.contains(q) == true&#10;            }&#10;        )&#10;        adapter.clear()&#10;        adapter.addAll(visible.map { it.projectName ?: &quot;(unnamed project)&quot; })&#10;        adapter.notifyDataSetChanged()&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        loadProjects()&#10;    }&#10;&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == REQ_ADD_PROJECT &amp;&amp; resultCode == RESULT_OK) {&#10;            // Newly added project; reload list&#10;            loadProjects()&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.xamu_wil_project.ui&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.ArrayAdapter&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ListView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.widget.addTextChangedListener&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.xamu_wil_project.R&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.database.*&#10;import com.example.xamu_wil_project.data.DataSeeder&#10;import com.example.xamu_wil_project.data.Project&#10;import com.example.xamu_wil_project.data.local.toModel&#10;import kotlinx.coroutines.flow.collectLatest&#10;import kotlinx.coroutines.launch&#10;&#10;class SelectProjectActivity : AppCompatActivity() {&#10;&#10;    private lateinit var auth: FirebaseAuth&#10;    private lateinit var db: DatabaseReference&#10;&#10;    private val allProjects = mutableListOf&lt;Project&gt;()&#10;    private val visible = mutableListOf&lt;Project&gt;()&#10;    private lateinit var adapter: ArrayAdapter&lt;String&gt;&#10;    private val REQ_ADD_PROJECT = 2001&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_select_project)&#10;&#10;        auth = FirebaseAuth.getInstance()&#10;        db = FirebaseDatabase.getInstance().getReference(&quot;ProjectsInfo&quot;)&#10;&#10;        val list: ListView = findViewById(R.id.lVProjects)&#10;        val search: EditText = findViewById(R.id.edtSearchProjects)&#10;        val btnAdd: Button = findViewById(R.id.btnConfirmAddProject)&#10;&#10;        adapter = ArrayAdapter(this, android.R.layout.simple_list_item_1, mutableListOf())&#10;        list.adapter = adapter&#10;&#10;        // Capture incoming company name (if this activity was opened after selecting a client)&#10;        val incomingCompany = intent.getStringExtra(&quot;companyName&quot;) ?: &quot;&quot;&#10;&#10;        // Prefer local Room DB for project listing (live updates). Fallback to Firebase single-read if DB empty.&#10;        val localDb = com.example.xamu_wil_project.data.local.AppDatabase.getInstance(this)&#10;        val projectDao = localDb.projectDao()&#10;&#10;        // Observe Room first&#10;        lifecycleScope.launch {&#10;            if (incomingCompany.isNotBlank()) {&#10;                projectDao.getByCompanyFlow(incomingCompany).collectLatest { entities -&gt;&#10;                    if (entities.isNotEmpty()) {&#10;                        allProjects.clear()&#10;                        allProjects.addAll(entities.map { it.toModel() })&#10;                        filter(&quot;&quot;)&#10;                    } else {&#10;                        // fallback to firebase single-read&#10;                        loadProjectsFromFirebase(incomingCompany)&#10;                    }&#10;                }&#10;            } else {&#10;                projectDao.getAllFlow().collectLatest { entities -&gt;&#10;                    if (entities.isNotEmpty()) {&#10;                        allProjects.clear()&#10;                        allProjects.addAll(entities.map { it.toModel() })&#10;                        filter(&quot;&quot;)&#10;                    } else {&#10;                        loadProjectsFromFirebase(&quot;&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        search.addTextChangedListener(&#10;            onTextChanged = { text, _, _, _ -&gt; filter(text?.toString().orEmpty()) }&#10;        )&#10;&#10;        list.setOnItemClickListener { _, _, position, _ -&gt;&#10;            val p = visible[position]&#10;            val intent = Intent(this, ProjectDetailsActivity::class.java)&#10;                .putExtra(&quot;companyName&quot;, p.companyName ?: &quot;-&quot;)&#10;                .putExtra(&quot;projectName&quot;, p.projectName ?: &quot;-&quot;)&#10;            startActivity(intent)&#10;        }&#10;&#10;        btnAdd.setOnClickListener {&#10;            // If this screen was opened for a specific company, forward it to AddProjectActivity&#10;            val companyToPass = if (incomingCompany.isNotBlank()) incomingCompany else &quot;&quot;&#10;            val intent = Intent(this, AddProjectActivity::class.java)&#10;                .putExtra(&quot;companyName&quot;, companyToPass)&#10;                .putExtra(&quot;forResult&quot;, true)&#10;            startActivityForResult(intent, REQ_ADD_PROJECT)&#10;        }&#10;    }&#10;&#10;    private fun loadProjectsFromFirebase(incomingCompany: String) {&#10;        val myEmail = auth.currentUser?.email&#10;        db.addListenerForSingleValueEvent(object : ValueEventListener {&#10;            override fun onDataChange(snapshot: DataSnapshot) {&#10;                allProjects.clear()&#10;                if (snapshot.exists() &amp;&amp; snapshot.hasChildren()) {&#10;                    for (child in snapshot.children) {&#10;                        val p = child.getValue(Project::class.java)&#10;                        // If user is signed in, filter by their email; otherwise include all&#10;                        if (p != null &amp;&amp; (myEmail == null || myEmail.isBlank() || p.appUserUsername == myEmail)) {&#10;                            // if incomingCompany is provided, filter by it&#10;                            if (incomingCompany.isBlank() || p.companyName == incomingCompany) {&#10;                                allProjects.add(p)&#10;                            }&#10;                        }&#10;                    }&#10;                    if (allProjects.isNotEmpty()) {&#10;                        filter(&quot;&quot;) // show all for this user or all projects&#10;                        return&#10;                    }&#10;                }&#10;                // fallback to demo projects&#10;                allProjects.addAll(DataSeeder.getLocalProjects(this@SelectProjectActivity))&#10;                filter(&quot;&quot;)&#10;                Toast.makeText(this@SelectProjectActivity, &quot;Using demo projects&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;&#10;            override fun onCancelled(error: DatabaseError) {&#10;                // on error, fallback to demo&#10;                allProjects.clear()&#10;                allProjects.addAll(DataSeeder.getLocalProjects(this@SelectProjectActivity))&#10;                filter(&quot;&quot;)&#10;                Toast.makeText(this@SelectProjectActivity, &quot;Could not load projects; using demo data&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun filter(query: String) {&#10;        val q = query.trim().lowercase()&#10;        visible.clear()&#10;        visible.addAll(&#10;            allProjects.filter {&#10;                it.projectName?.lowercase()?.contains(q) == true&#10;            }&#10;        )&#10;        adapter.clear()&#10;        adapter.addAll(visible.map { it.projectName ?: &quot;(unnamed project)&quot; })&#10;        adapter.notifyDataSetChanged()&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // keep firebase fallback to ensure latest remote entries are visible when needed&#10;        // loadProjects() // removed in favor of Room + firebase fallback&#10;    }&#10;&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == REQ_ADD_PROJECT &amp;&amp; resultCode == RESULT_OK) {&#10;            // Newly added project; refresh list from Room is automatic via Flow; but reload firebase fallback too&#10;            // Trigger a small refresh: if using firebase fallback, reload once&#10;            if (allProjects.isEmpty()) loadProjectsFromFirebase(&quot;&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>